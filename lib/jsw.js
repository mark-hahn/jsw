// Generated by CoffeeScript 1.9.3

/*
  jsw.coffee
  A translator for an alternate Javascript syntax that uses significant whitespace
 */

(function() {
  var Uglify, args, ast, dumpAst, file, fs, i, jsIn, len, log, node_map, out, pfx, ref, source_map, streamOpts, util;

  log = require('debug')('jsw');

  fs = require('fs');

  util = require('util');

  args = require('./args');

  Uglify = require("uglify-js2");

  dumpAst = function(ast) {
    var tt;
    tt = new Uglify.TreeTransformer(null, function(node) {
      delete node.start;
      delete node.end;
      node.type = node.TYPE;
      return node;
    });
    fs.writeFileSync(pfx + 'dump.json', JSON.stringify(ast.transform(tt)));
    return ast;
  };

  ref = args.files;
  for (i = 0, len = ref.length; i < len; i++) {
    file = ref[i];
    console.log("\nvvvvvvvvvvvvvvvvvv");
    pfx = 'test/';
    jsIn = fs.readFileSync(file, 'utf8');
    if (args.tojsw) {
      ast = dumpAst(Uglify.parse(jsIn));
      fs.writeFileSync(pfx + 'in-ast.json', JSON.stringify(ast));
      node_map = {
        add: function(type, origStart, origEnd, genStart, genEnd) {
          return log('node_mapping', {
            type: type,
            origStart: origStart,
            origEnd: origEnd,
            genStart: genStart,
            genEnd: genEnd
          });
        }
      };
      streamOpts = {
        beautify: true,
        indent_level: 2,
        node_map: node_map
      };
      if (args.map) {
        source_map = Uglify.SourceMap();
        streamOpts.source_map = source_map;
      }
      out = Uglify.OutputStream(streamOpts);
      ast.print(out);
      fs.writeFileSync(pfx + 'out.js', out.toString());
      if (args.map) {
        fs.writeFileSync(pfx + 'map.json', source_map.toString());
      }
    }
    console.log("^^^^^^^^^^^^^^^^^^\n");
  }

}).call(this);
