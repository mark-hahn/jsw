// Generated by CoffeeScript 1.9.3

/*
  jsw.coffee
  A translator for an alternate Javascript syntax that uses significant whitespace
 */

(function() {
  var Uglify, UglifyFrom, UglifyT0, args, ast, chlklin, codeIn, codeOut, file, fileBase, fileNoExt, fs, i, jswMappings, len, log, meta, metaObj, metaStr, opts, ref, ref1, ref2, ref3, ref4, utils;

  log = require('debug')('jsw');

  fs = require('fs');

  utils = require('./utils');

  args = require('./args');

  UglifyT0 = require('../uglify/tojsw/node');

  UglifyFrom = require('../uglify/fromjsw/node');

  meta = require('./meta');

  chlklin = require('chalkline');

  ref = args.files;
  for (i = 0, len = ref.length; i < len; i++) {
    file = ref[i];
    chlklin.magenta();
    if (args.tojsw) {
      ref1 = utils.checkFileExt(file, '.js'), fileNoExt = ref1[0], fileBase = ref1[1];
      codeIn = fs.readFileSync(file, 'utf8');
      ast = UglifyT0.parse(codeIn);
      utils.dumpAst(ast, 'test/ast-dump.json');
      fs.writeFileSync('test/ast.json', JSON.stringify(ast));
      opts = {
        beautify: true,
        indent_level: 2
      };
      if (args.map) {
        jswMappings = [];
        opts.node_map = {
          add: function(node_gen_map) {
            return jswMappings.push(node_gen_map);
          }
        };
      }
      codeOut = ast.print_to_string(opts);
      metaStr = (args.map ? meta.encode(codeIn, codeOut, jswMappings) : '');
      fs.writeFileSync(fileNoExt + '.jsw', codeOut + metaStr);
    }
    if (args.beautifyjs) {
      Uglify = require('uglify-js2');
      ref2 = utils.checkFileExt(file, '.js'), fileNoExt = ref2[0], fileBase = ref2[1];
      codeIn = fs.readFileSync(file, 'utf8');
      ast = Uglify.parse(codeIn);
      utils.dumpAst(ast, 'test/ast-dump' + fileBase + '.json');
      fs.writeFileSync('test/b-ast.json', JSON.stringify(ast));
      codeOut = ast.print_to_string({
        beautify: true
      });
      fs.writeFileSync('test/b-out.js', codeOut);
    }
    if (args.fromjsw) {
      ref3 = utils.checkFileExt(file, '.jsw'), fileNoExt = ref3[0], fileBase = ref3[1];
      codeIn = fs.readFileSync(file, 'utf8');
      if (args.map) {
        ref4 = meta.decode(codeIn), codeIn = ref4[0], metaObj = ref4[1];
        if (!codeIn) {
          throw 'jsw metadata is missing, corrupted, or unknown version';
        }
        fs.writeFileSync('test/meta.json', JSON.stringify(metaObj != null ? metaObj : {}));
      }
      ast = UglifyFrom.parse(codeIn);
      utils.dumpAst(ast, 'test/ast-dump.json');
      fs.writeFileSync('test/ast.json', JSON.stringify(ast));
      opts = {
        beautify: true,
        indent_level: 2
      };
      codeOut = ast.print_to_string(opts);
      fs.writeFileSync(fileNoExt + '.js', codeOut);
    }
    chlklin.blue();
  }

}).call(this);
